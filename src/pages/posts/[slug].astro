---
import { type CollectionEntry } from 'astro:content';
import { Markdown } from 'astro-remote';
import GithubSlugger from 'github-slugger';
import { contentfulClient, type BlogPost } from '../../lib/contentful';
import CodeBlock from '../../components/Markdown/CodeBlock.astro';
import CodeSpan from '../../components/Markdown/CodeSpan.astro';
import Heading from '../../components/Markdown/Heading.astro';
import Layout from '../../components/Layout.astro';
import Main from '../../components/Main.astro';
import ContentWrapper from '../../components/ContentWrapper.astro';
import Paragraph from '../../components/Markdown/Paragraph.astro';
import Link from '../../components/Markdown/Link.astro';
import Blockquote from '../../components/Markdown/Blockquote.astro';
import Split from '../../components/Markdown/Split.astro';
import Ul from '../../components/Markdown/Ul.astro';
import ImageView from '../../components/ImageView/ImageView.astro';
import Table from '../../components/Markdown/Table.astro';
import Note from '../../components/Markdown/Note.astro';
import Tag from '../../components/Tag.astro';
import ContentContainer from '../../components/ContentContainer.astro';
import Ol from '../../components/Markdown/Ol.astro';
import CategoryList from '../../components/CategoryList.astro';
import Outline from '../../components/Markdown/Outline.astro';

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries({
    content_type: 'blogPost',
  });
  const pages = entries.items.map((entry) => ({
    params: { slug: entry.fields.slug },
    props: {
      title: entry.fields.title,
      content: entry.fields.content,
      date: new Date(entry.fields.date?.toString() ?? '').toLocaleDateString(
        'ja-JP',
        { timeZone: 'Asia/Tokyo' },
      ),
      tags: entry.fields.tags,
      category: entry.fields.category,
      image: entry.fields.image,
      description: entry.fields.description,
    },
  }));
  return pages;
}
type Props = BlogPost;

export const slugger = new GithubSlugger();
slugger.reset();

const post = Astro.props;
---

<Layout
  title={post.title}
  description={post.description}
  image={post.image.fields.file?.url?.toString()}
>
  <div class="py-12">
    <h1 class="text-center text-4xl">{post.title}</h1>
    <p class="text-center">{post.date}</p>
    {
      post.tags && (
        <div class="flex justify-center gap-x-2 flex-wrap mt-6">
          {post.tags.map((tag) => (
            <Tag href={`/tags/${tag.fields.slug}`}>{tag.fields.title}</Tag>
          ))}
        </div>
      )
    }
  </div>
  <ContentWrapper>
    <Main>
      <ContentContainer>
        <div data-scrollspy-content="#scrollspy-content">
          <Markdown
            content={post.content}
            components={{
              CodeBlock,
              CodeSpan,
              Heading,
              Note,
              p: Paragraph,
              a: Link,
              hr: Split,
              ul: Ul,
              ol: Ol,
              blockquote: Blockquote,
              img: ImageView,
              table: Table,
            }}
          />
        </div>
      </ContentContainer>
      <CategoryList forceBottom />
    </Main>
    <div class="w-full max-w-4xl xl:w-auto xl:max-w-none space-y-4">
      <Outline content={post.content} />
    </div>
  </ContentWrapper>
</Layout>
