---
import BaseHead from './BaseHead.astro';
import Header from './Header.astro';
import Footer from './Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

type Props = {
  title?: string;
  description?: string;
  image?: string;
};

const { title, description, image } = Astro.props;
---

<!doctype html>
<html lang="ja">
  <head>
    <BaseHead
      title={title ? `${title} - ${SITE_TITLE}` : SITE_TITLE}
      description={description && description.length > 0
        ? description
        : SITE_DESCRIPTION}
      image={image}
    />
  </head>
  <body class="flex flex-col items-center h-screen h-[100svh]">
    <Header title={SITE_TITLE} />
    <div class="container">
      <slot />
    </div>

    <Footer />
    <script is:inline>
      const theme = (() => {
        if (
          typeof window.localStorage !== 'undefined' &&
          typeof window.localStorage.getItem('theme') === 'string'
        ) {
          return window.localStorage.getItem('theme');
        }

        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dracula';
        }

        return 'cupcake';
      })();

      if (theme === 'cupcake') {
        document.documentElement.setAttribute('data-theme', 'cupcake');
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.setAttribute('data-theme', 'dracula');
        document.documentElement.classList.add('dark');
      }

      window.localStorage.setItem('theme', theme);

      // scroll spy and highlight current header link, and parent link
      let menuEl, contentEl, scrollspyMenuItems, contentPos;

      const initElements = () => {
        if (!menuEl || !contentEl || !scrollspyMenuItems || !contentPos) {
          menuEl = document.querySelector('[data-scrollspy="#scrollspy-menu"]');
          contentEl = document.querySelector(
            '[data-scrollspy-content="#scrollspy-content"]',
          );
          scrollspyMenuItems = menuEl?.querySelectorAll('a');
          contentPos = document.body?.getBoundingClientRect().top - contentEl?.getBoundingClientRect().top;
        }
      };

      // half of the screen
      let detectPos = window.innerHeight / 2;
      const dataActiveName = 'data-scrollspy-menu-active';
      const dataActiveParentName = 'data-scrollspy-menu-active-parent';
      const highlightClassList = ['text-base-content', 'font-bold'];

      const highlightMenu = () => {
        initElements();

        for (let i = 0; i < scrollspyMenuItems?.length; i++) {
          const el = scrollspyMenuItems[i];
          const href = el.getAttribute('href');
          const targetEl = document.querySelector(href);

          if (!targetEl) {
            continue;
          }

          const targetPos = targetEl.getBoundingClientRect().top;

          if (targetPos < detectPos + contentPos) {
            const activeEl = menuEl.querySelector(`[${dataActiveName}]`);
            if (activeEl) {
              highlightClassList.forEach((className) => {
                activeEl.classList.remove(className);
              });
              activeEl.removeAttribute(dataActiveName);
            }
            highlightClassList.forEach((className) => {
              el.classList.add(className);
            });
            el.setAttribute(dataActiveName, '');

            const parentATag = el
              .closest('li')
              ?.closest('ul')
              ?.closest('li')
              ?.querySelector('a');
            if (parentATag) {
              const activeParentEl = menuEl.querySelector(
                `[${dataActiveParentName}]`,
              );
              if (activeParentEl) {
                highlightClassList.forEach((className) => {
                  activeParentEl.classList.remove(className);
                });
                activeParentEl.removeAttribute(dataActiveParentName);
              }
              highlightClassList.forEach((className) => {
                parentATag.classList.add(className);
              });
              parentATag.setAttribute(dataActiveParentName, '');
            } else {
              const activeParentEl = menuEl.querySelector(
                `[${dataActiveParentName}]`,
              );
              if (activeParentEl) {
                highlightClassList.forEach((className) => {
                  activeParentEl.classList.remove(className);
                });
                activeParentEl.removeAttribute(dataActiveParentName);
              }
            }
          }
        }
      };

      highlightMenu();

      window.addEventListener('scroll', () => {
        highlightMenu();
      });
    </script>
  </body>
</html>
